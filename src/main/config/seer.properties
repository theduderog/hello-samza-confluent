# Job
job.factory.class=org.apache.samza.job.local.ThreadJobFactory
job.coordinator.system=kafka
job.name=seer

# YARN
# yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz

#Custom
confluent.schema.registry.url=http://localhost:9081
out=fortunes

# Task
task.class=theduderog.samza.tasks.SeerTask
task.inputs=kafka.questions
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
# Normally, this would be 3, but we have only one broker.
task.checkpoint.replication.factor=1
# task.consumer.batch.size=1000
task.consumer.batch.size=1

# Metrics
metrics.reporters=snapshot,jmx
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.samza_metrics
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory

# Serializers
serializers.registry.byte.class=org.apache.samza.serializers.ByteSerdeFactory
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
serializers.registry.avro.class=theduderog.samza.serializers.AvroSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory

# Kafka System
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.key.serde=string
systems.kafka.samza.msg.serde=avro
#Serde for metrics topic
systems.kafka.streams.samza_metrics.samza.msg.serde=metrics
#rhoover: when checkpoint is not present, read oldest data possible
systems.kafka.samza.offset.default=oldest
systems.kafka.consumer.zookeeper.connect=localhost:2181/
systems.kafka.producer.bootstrap.servers=localhost:9092
#systems.kafka.producer.producer.type=sync
#systems.kafka.producer.compression.codec=snappy
#systems.kafka.producer.batch.num.messages=1000
#systems.kafka.producer.batch.num.messages=1
