#!/bin/bash -e
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This script will download, setup, start, and stop servers for Kafka, YARN, and ZooKeeper,
# as well as downloading, building and locally publishing Samza

if [ -z "$JAVA_HOME" ]; then
  if [ -x /usr/libexec/java_home ]; then
    export JAVA_HOME="$(/usr/libexec/java_home)"
  else
    echo "JAVA_HOME not set. Exiting."
    exit 1
  fi
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BASE_DIR=$(dirname $DIR)
DEPLOY_ROOT_DIR=$BASE_DIR/deploy
DOWNLOAD_CACHE_DIR=$HOME/.samza/download
COMMAND=$1
SYSTEM=$2

DOWNLOAD_CONFLUENT=http://packages.confluent.io/archive/2.0/confluent-2.0.1-2.11.7.tar.gz
DOWNLOAD_YARN=http://archive.apache.org/dist/hadoop/common/hadoop-2.6.1/hadoop-2.6.1.tar.gz

bootstrap() {
  echo "Bootstrapping the system..."
  set -x
  stop_all
  rm -rf "$DEPLOY_ROOT_DIR"
  mkdir "$DEPLOY_ROOT_DIR"
  install_all
  start_all
  exit 0
}

install_all() {
  $DIR/grid install confluent
  $DIR/grid install yarn
}

install_yarn() {
  mkdir -p "$DEPLOY_ROOT_DIR"
  install yarn $DOWNLOAD_YARN hadoop-2.6.1
  cp "$BASE_DIR/conf/yarn-site.xml" "$DEPLOY_ROOT_DIR/yarn/etc/hadoop/yarn-site.xml"
  if [ ! -f "$HOME/.samza/conf/yarn-site.xml" ]; then
    mkdir -p "$HOME/.samza/conf"
    cp "$BASE_DIR/conf/yarn-site.xml" "$HOME/.samza/conf/yarn-site.xml"
  fi
}

install_confluent() {
  echo "INSTALL CONFLUENT"
  mkdir -p "$DEPLOY_ROOT_DIR"
  install confluent $DOWNLOAD_CONFLUENT confluent-2.0.1
  patch -p1 -d $DEPLOY_ROOT_DIR/confluent < $BASE_DIR/conf/confluent/zk-stop.patch
  patch -p1 -d $DEPLOY_ROOT_DIR/confluent < $BASE_DIR/conf/confluent/schema-registry-port.patch
  #rhoover: disable auto topic creation
  echo "auto.create.topics.enable=false" >> $DEPLOY_ROOT_DIR/confluent/etc/kafka/server.properties
}

install() {
  DESTINATION_DIR="$DEPLOY_ROOT_DIR/$1"
  DOWNLOAD_URL=$2
  PACKAGE_DIR="$DOWNLOAD_CACHE_DIR/$3"
  PACKAGE_FILE="$DOWNLOAD_CACHE_DIR/$(basename $DOWNLOAD_URL)"
  if [ -f "$PACKAGE_FILE" ]; then
    echo "Using previously downloaded file $PACKAGE_FILE"
  else
    echo "Downloading $(basename $DOWNLOAD_URL)..."
    mkdir -p $DOWNLOAD_CACHE_DIR
    curl "$DOWNLOAD_URL" > "${PACKAGE_FILE}.tmp"
    mv "${PACKAGE_FILE}.tmp" "$PACKAGE_FILE"
  fi
  rm -rf "$DESTINATION_DIR" "$PACKAGE_DIR"
  tar -xf "$PACKAGE_FILE" -C $DOWNLOAD_CACHE_DIR
  mv "$PACKAGE_DIR" "$DESTINATION_DIR"
}

start_all() {
  $DIR/grid start zookeeper
  #$DIR/grid start yarn
  $DIR/grid start kafka
  sleep 3
  $DIR/grid start schemaregistry
}

start_zookeeper() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/zookeeper-server-start ]; then
    $DEPLOY_ROOT_DIR/confluent/bin/zookeeper-server-start -daemon $DEPLOY_ROOT_DIR/confluent/etc/kafka/zookeeper.properties
  else
    echo 'Zookeeper is not installed. Run: bin/grid install confluent'
  fi
}

start_kafka() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/kafka-server-start ]; then
    $DEPLOY_ROOT_DIR/confluent/bin/kafka-server-start -daemon $DEPLOY_ROOT_DIR/confluent/etc/kafka/server.properties
  else
    echo 'Kafka is not installed. Run: bin/grid install confluent'
  fi
}

start_schemaregistry() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/schema-registry-start ]; then
    mkdir -p $DEPLOY_ROOT_DIR/$SYSTEM/logs
    pushd $DEPLOY_ROOT_DIR/$SYSTEM/logs
      $DEPLOY_ROOT_DIR/confluent/bin/schema-registry-start -daemon $DEPLOY_ROOT_DIR/confluent/etc/schema-registry/schema-registry.properties
    popd
  else
    echo 'Schema Registry is not installed. Run: bin/grid install confluent'
  fi
}

start_yarn() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh ]; then
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh start resourcemanager
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh start nodemanager
  else
    echo 'YARN is not installed. Run: bin/grid install yarn'
  fi
}

stop_all() {
  $DIR/grid stop schemaregistry || true
  $DIR/grid stop kafka
  #$DIR/grid stop yarn
  $DIR/grid stop zookeeper
}

stop_zookeeper() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/zookeeper-server-stop ]; then
    $DEPLOY_ROOT_DIR/confluent/bin/zookeeper-server-stop
  else
    echo 'Zookeeper is not installed. Run: bin/grid install confluent'
  fi
}

stop_kafka() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/kafka-server-stop ]; then
    $DEPLOY_ROOT_DIR/confluent/bin/kafka-server-stop
  else
    echo 'Kafka is not installed. Run: bin/grid install confluent'
  fi
}

stop_schemaregistry() {
  if [ -f $DEPLOY_ROOT_DIR/confluent/bin/schema-registry-stop ]; then
    $DEPLOY_ROOT_DIR/confluent/bin/schema-registry-stop
  else
    echo 'Schema Registry is not installed. Run: bin/grid install confluent'
  fi
}

stop_yarn() {
  if [ -f $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh ]; then
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh stop resourcemanager
    $DEPLOY_ROOT_DIR/$SYSTEM/sbin/yarn-daemon.sh stop nodemanager
  else
    echo 'YARN is not installed. Run: bin/grid install yarn'
  fi
}

# Check arguments
if [ "$COMMAND" == "bootstrap" ] && test -z "$SYSTEM"; then
  bootstrap
  exit 0
elif (test -z "$COMMAND" && test -z "$SYSTEM") \
  || ( [ "$COMMAND" == "help" ] || test -z "$COMMAND" || test -z "$SYSTEM"); then
  echo
  echo "  Usage.."
  echo
  echo "  $ grid"
  echo "  $ grid bootstrap"
  echo "  $ grid install [yarn|confluent|all]"
  echo "  $ grid start [yarn|kafka|zookeeper|schemaregistry|all]"
  echo "  $ grid stop [yarn|kafka|zookeeper|schemaregistry|all]"
  echo
  exit 1
else
  echo "EXECUTING: $COMMAND $SYSTEM"

  "$COMMAND"_"$SYSTEM"
fi
